<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Docker &#8211; Eternal Center</title>
	<atom:link href="https://eternalcenter-sep-2022.github.io/category/container/docker/feed/" rel="self" type="application/rss+xml" />
	<link>https://eternalcenter-sep-2022.github.io/</link>
	<description></description>
	<lastBuildDate>Tue, 23 Aug 2022 17:22:35 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>[步骤] Docker 本地镜像的导出和导入</title>
		<link>https://eternalcenter-sep-2022.github.io/docker-image-local/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 06 Oct 2020 07:47:36 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Container (容器)]]></category>
		<category><![CDATA[Docker]]></category>
		<guid isPermaLink="false">https://eternalcenter-sep-2022.github.io/?p=11344</guid>

					<description><![CDATA[注意： 在导入和导出本地 Docker 镜像之前，要先安装 Docker 正文： 步骤一：导出 Docker 本地镜像 （补充：将 latest 版本的 centos Docker 镜像导出为 centos.tar） 步骤二：导入 Docker 本地镜像 （补充：导入 centos.tar）]]></description>
										<content:encoded><![CDATA[
<h1>注意：</h1>



<p>在导入和导出本地 Docker 镜像之前，要先安装 Docker</p>



<div class="wp-container-1 is-horizontal is-content-justification-center wp-block-buttons">
<div class="wp-block-button is-style-outline"><a class="wp-block-button__link no-border-radius" href="https://eternalcenter-sep-2022.github.io/docker-install/">Docker 的安装</a></div>
</div>



<h1>正文：</h1>



<h3>步骤一：导出 Docker 本地镜像</h3>



<pre class="wp-block-code"><code># docker save centos:latest &gt; centos.tar</code></pre>



<p>（补充：将 latest 版本的 centos Docker 镜像导出为 centos.tar）</p>



<h3>步骤二：导入 Docker 本地镜像</h3>



<pre class="wp-block-code"><code># docker load</code></pre>



<p>（补充：导入 centos.tar）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Docker 私有镜像仓库的搭建</title>
		<link>https://eternalcenter-sep-2022.github.io/docker-repository/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 06 Oct 2020 07:41:53 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Container (容器)]]></category>
		<category><![CDATA[Docker]]></category>
		<guid isPermaLink="false">https://eternalcenter-sep-2022.github.io/?p=11342</guid>

					<description><![CDATA[注意： 在搭建私有 Docker 镜像仓库之前，要先安装 Docker 正文： 内容一：搭建私有 Dokcer 镜像仓库 1.1 下载 registry 镜像 1.2 加载并启动 registry 镜像 （补充：这里以使用宿主机的 5000 端口为例） 1.3 确认 Docker 镜像仓库搭建成功 （补充：这里以显示 127.0.0.1:5000/v2/ 为例，出现大括号 “{}” 则表示搭建成功） 内容二：私有 Dokcer 镜像库的使用方法 2.1 将现有的 Docker 镜像上传到私有 Docker 镜像库 2.1.1 给现有的 Docker 镜像在私有 Docker 镜像库中打上 1 个新的标签 （补充：这里以将现有的 centos:latest 镜像打成 127.0.0.1:5000/v2/centos:latest 标签为例） 2.1.2 将现有的 Docker 镜像上传到私有 &#8230; <p class="link-more"><a href="https://eternalcenter-sep-2022.github.io/docker-repository/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] Docker 私有镜像仓库的搭建"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h1 id="注意">注意：</h1>



<p>在搭建私有 Docker 镜像仓库之前，要先安装 Docker</p>



<div class="wp-container-2 is-horizontal is-content-justification-center wp-block-buttons">
<div class="wp-block-button is-style-outline"><a class="wp-block-button__link no-border-radius" href="https://eternalcenter-sep-2022.github.io/docker-install/">Docker 的安装</a></div>
</div>



<h1 id="正文">正文：</h1>



<h3 id="内容一-搭建私有-dokcer-镜像仓库1-1-下载-registry-镜像">内容一：搭建私有 Dokcer 镜像仓库</h3>



<h4 id="内容一-搭建私有-dokcer-镜像仓库1-1-下载-registry-镜像">1.1 下载 registry 镜像</h4>



<pre class="wp-block-code"><code># docker pull registry</code></pre>



<h4 id="1-2-加载并启动-registry-镜像">1.2 加载并启动 registry 镜像</h4>



<pre class="wp-block-code"><code># docker run -d -p 5000:5000 registry
43c6b8c581e9039c8b7df12bb11a89dbdc9ff0b7e00fd6d345068aa9b5af7d9f</code></pre>



<p>（补充：这里以使用宿主机的 5000 端口为例）</p>



<h4 id="1-3-确认-docker-镜像仓库搭建成功">1.3 确认 Docker 镜像仓库搭建成功</h4>



<pre class="wp-block-code"><code># curl 127.0.0.1:5000/v2/
{}</code></pre>



<p>（补充：这里以显示 127.0.0.1:5000/v2/ 为例，出现大括号 “{}” 则表示搭建成功）</p>



<h3 id="内容二-私有-dokcer-镜像库的使用方法2-1-将现有的-docker-镜像上传到私有-docker-镜像库2-1-1-给现有的-docker-镜像在私有-docker-镜像库中打上一个新的标签">内容二：私有 Dokcer 镜像库的使用方法</h3>



<h4 id="内容二-私有-dokcer-镜像库的使用方法2-1-将现有的-docker-镜像上传到私有-docker-镜像库2-1-1-给现有的-docker-镜像在私有-docker-镜像库中打上一个新的标签">2.1 将现有的 Docker 镜像上传到私有 Docker 镜像库</h4>



<h5 id="内容二-私有-dokcer-镜像库的使用方法2-1-将现有的-docker-镜像上传到私有-docker-镜像库2-1-1-给现有的-docker-镜像在私有-docker-镜像库中打上一个新的标签">2.1.1 给现有的 Docker 镜像在私有 Docker 镜像库中打上 1 个新的标签</h5>



<pre class="wp-block-code"><code># docker tag centos:latest 127.0.0.1:5000/v2/centos:latest</code></pre>



<p>（补充：这里以将现有的 centos:latest 镜像打成 127.0.0.1:5000/v2/centos:latest 标签为例）</p>



<h5 id="2-1-2-将现有的-docker-镜像上传到私有-docker-镜像库">2.1.2 将现有的 Docker 镜像上传到私有 Docker 镜像库</h5>



<pre class="wp-block-code"><code># docker push 127.0.0.1:5000/centos:latest
The push refers to repository &#91;127.0.0.1:5000/centos]
291f6e44771a: Pushed 
latest: digest: sha256:fc4a234b91cc4b542bac8a6ad23b2ddcee60ae68fc4dbd4a52efb5f1b0baad71 size: 529</code></pre>



<p>（补充：这里以上传 127.0.0.1:5000/v2/centos:latest 为例）</p>



<h4 id="2-2-显示私有的-docker-镜像库2-2-1-显示私有的-docker-镜像库中有那些镜像">2.2 显示私有的 Docker 镜像库</h4>



<h5 id="2-2-显示私有的-docker-镜像库2-2-1-显示私有的-docker-镜像库中有那些镜像">2.2.1 显示私有的 Docker 镜像库中有那些镜像</h5>



<pre class="wp-block-code"><code># curl  http://127.0.0.1:5000/v2/_catalog
{"repositories":&#91;"centos"]}</code></pre>



<p>（补充：这里以显示 127.0.0.1:5000/v2/ 为例）</p>



<h5 id="2-2-2-显示私有的-docker-镜像库中某个镜像有哪些版本">2.2.2 显示私有的 Docker 镜像库中某个镜像有哪些版本</h5>



<pre class="wp-block-code"><code># curl  http://127.0.0.1:5000/v2/centos/tags/list
{"name":"centos","tags":&#91;"latest"]}</code></pre>



<p>（补充：这里以显示 http://127.0.0.1:5000/v2 上 centos 镜像的版本为例）</p>



<h4 id="2-3-从私有的-docker-镜像库中下载镜像">2.3 从私有的 Docker 镜像库中下载镜像</h4>



<pre class="wp-block-code"><code># docker pull 127.0.0.1:5000/v2/centos:latest
latest: Pulling from v2/centos
Digest: sha256:fc4a234b91cc4b542bac8a6ad23b2ddcee60ae68fc4dbd4a52efb5f1b0baad71
Status: Image is up to date for 127.0.0.1:5000/v2/centos:latest
127.0.0.1:5000/v2/centos:latest</code></pre>



<p>（补充：这里以下载 127.0.0.1:5000/v2/centos:latest 为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Docker 自定义镜像的创建</title>
		<link>https://eternalcenter-sep-2022.github.io/docker-image-create/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 06 Oct 2020 07:26:41 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Container (容器)]]></category>
		<category><![CDATA[Docker]]></category>
		<guid isPermaLink="false">https://eternalcenter-sep-2022.github.io/?p=11340</guid>

					<description><![CDATA[注意： 在创建 Docker 自定义镜像之前，要先安装 Docker 正文： 步骤一：基于现有的镜像进行手动配置后再创建 1.1 加载并启动 Docker 镜像 （补充：1) 这里以加载并启动 centos 镜像为例2) -t 代表要开启一个伪终端3) -i 代表要保持打开并且可以进行标准输入） 1.2 对镜像里的系统进行操作并退出 （步骤略） 1.3 显示刚刚创建的容器 （补充：这里以显示到的容器 ID 是 d5cd7496a72c） 1.4 将刚刚创建的容器转换成新镜像 （补充：这里以通过 d5cd7496a72c 生成 v1 版本的 newos 为例） 1.5 测试刚刚创建的新镜像是否可用 （补充：这里以运行 newos 镜像为例） 步骤二：基于现有的镜像使用配置文件修改后在创建 2.1 创建使用镜像配置文件的目录 （补充：这里以创建 newhttpd 目录为例） 2.3 将 YUM 的从库文件放到镜像配置文件的目录 （补充：这里以将在次环境里可用的 yum 配置文件 &#8230; <p class="link-more"><a href="https://eternalcenter-sep-2022.github.io/docker-image-create/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] Docker 自定义镜像的创建"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h1 id="注意">注意：</h1>



<p>在创建 Docker 自定义镜像之前，要先安装 Docker</p>



<div class="wp-container-3 is-horizontal is-content-justification-center wp-block-buttons">
<div class="wp-block-button is-style-outline"><a class="wp-block-button__link no-border-radius" href="https://eternalcenter-sep-2022.github.io/docker-install/">Docker 的安装</a></div>
</div>



<h1 id="正文">正文：</h1>



<h3 id="具体的操作步骤-步骤一-基于现有的镜像进行手动配置后再创建1-1-加载并启动-docker-镜像">步骤一：基于现有的镜像进行手动配置后再创建</h3>



<h4 id="具体的操作步骤-步骤一-基于现有的镜像进行手动配置后再创建1-1-加载并启动-docker-镜像">1.1 加载并启动 Docker 镜像</h4>



<pre class="wp-block-code"><code># docker run -it centos</code></pre>



<p>（<br>补充：<br>1) 这里以加载并启动 centos 镜像为例<br>2) -t 代表要开启一个伪终端<br>3) -i 代表要保持打开并且可以进行标准输入<br>）</p>



<h4 id="1-2-对镜像里的系统进行操作并退出">1.2 对镜像里的系统进行操作并退出</h4>



<p>（步骤略）</p>



<h4 id="1-3-显示刚刚创建的容器">1.3 显示刚刚创建的容器</h4>



<pre class="wp-block-code"><code># docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
d5cd7496a72c        centos              "/bin/bash"              37 seconds ago      Exited (0) 14 seconds ago                       ecstatic_bassi</code></pre>



<p>（补充：这里以显示到的容器 ID 是 d5cd7496a72c）</p>



<h4 id="1-4-将刚刚创建的容器转换成新镜像">1.4 将刚刚创建的容器转换成新镜像</h4>



<pre class="wp-block-code"><code># docker commit d5cd7496a72c newos:v1 </code></pre>



<p>（补充：这里以通过 d5cd7496a72c 生成 v1 版本的 newos 为例）</p>



<h4 id="1-5-测试刚刚创建的新镜像是否可用">1.5 测试刚刚创建的新镜像是否可用</h4>



<pre class="wp-block-code"><code># docker run -it newos</code></pre>



<p>（补充：这里以运行 newos 镜像为例）</p>



<h3 id="步骤二-基于现有的镜像使用配置文件修改后在创建2-1-创建使用镜像配置文件的目录">步骤二：基于现有的镜像使用配置文件修改后在创建</h3>



<h4 id="步骤二-基于现有的镜像使用配置文件修改后在创建2-1-创建使用镜像配置文件的目录">2.1 创建使用镜像配置文件的目录</h4>



<pre class="wp-block-code"><code># mkdir -p ~/newhttpd</code></pre>



<p>（补充：这里以创建 newhttpd 目录为例）</p>



<h4 id="2-3-将-yum-的从库文件放到镜像配置文件的目录">2.3 将 YUM 的从库文件放到镜像配置文件的目录</h4>



<pre class="wp-block-code"><code># cp /etc/yum.repos.d/local.repo ~/newhttpd</code></pre>



<p>（补充：这里以将在次环境里可用的 yum 配置文件 /etc/yum.repos.d/local.repo 拷贝到 ~/newhttpd/ 为例）</p>



<h4 id="2-3-创建镜像配置文件">2.3 创建镜像配置文件</h4>



<pre class="wp-block-code"><code># touch ~/newhttpd/Dockerfile</code></pre>



<p>（补充：这里以创建 ~/newhttpd/Dockerfile 文件为例）</p>



<h4 id="2-4-编辑镜像配置文件">2.4 编辑镜像配置文件</h4>



<pre class="wp-block-code"><code># vim ~/newhttpd/Dockerfile</code></pre>



<p>创建以下内容：</p>



<pre class="wp-block-code"><code>FROM centos:latest
RUN yum -y install httpd
ENV EnvironmentFile=/etc/sysconfig/httpd
WORKDIR /var/www/html/
RUN echo "test" &gt; /var/www/html/index.html
EXPOSE 80
CMD &#91;"/usr/sbin/httpd", "-DFOREGROUND"]</code></pre>



<p>（<br>补充：<br>1) FROM 要从哪 1 个镜像克隆而来，这里以从 centos:latest 克隆为例<br>2) MAINTAINER 要说明的信息<br>3) ENV 要设置的环境变量，这里以使用以下文件作为配置文件为例：</p>



<pre class="wp-block-code"><code>/etc/sysconfig/httpd</code></pre>



<p>4) WORKDIR 要设置的工作目录，这里以使用以下目录作为工作目录为例：<br>/var/www/html/<br>5) RUN 在生成镜像时要执行的命令，可以有多条，这里以执行以下命令为例：</p>



<pre class="wp-block-code"><code>echo "test" &gt; /var/www/html/index.html</code></pre>



<p>6) CMD 容器启动时要执行的命令，只能有一条，这里以执行以下命令为例：</p>



<pre class="wp-block-code"><code>"/usr/sbin/httpd", "-DFOREGROUND"</code></pre>



<p>7) ADD 要复制的文件<br>8) EXPOSE 要开放的端口，这里以使用 80 端口为例<br>）</p>



<h4 id="2-5-使用刚刚创建的镜像配置文件创建新的镜像">2.5 使用刚刚创建的镜像配置文件创建新的镜像</h4>



<pre class="wp-block-code"><code># docker build -t newos:httpd ~/newhttpd</code></pre>



<p>（补充：这里以通过 ~/newhttpd 里的配置信息生成为名 newos 版本为 httpd 的容器为例）</p>



<h4 id="2-6-测试刚刚创建的新镜像是否可用">2.6 测试刚刚创建的新镜像是否可用</h4>



<pre class="wp-block-code"><code># docker run -d newos:http</code></pre>



<p>（补充：这里以测试名为 newos 版本为 httpd 的容器为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Docker 虚拟网桥的创建</title>
		<link>https://eternalcenter-sep-2022.github.io/docker-network/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 06 Oct 2020 07:20:02 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Container (容器)]]></category>
		<category><![CDATA[Docker]]></category>
		<guid isPermaLink="false">https://eternalcenter-sep-2022.github.io/?p=11338</guid>

					<description><![CDATA[注意： 在创建 Docker 虚拟网桥之前，要先安装 Docker 正文： 步骤一：创建 Docker 的虚拟网桥 （补充：这里以创建网段为 172.16.0.0/24 名为 dockernetwork 为例） 步骤二：显示创建的虚拟网桥 步骤三：使用创建的虚拟网桥加载并启动 Docker 镜像 （补充：这里以使用 dockernetwork 开启 nginx 镜像为例） 步骤四：创建端口映射 （补充：这里以将宿主机的 8080 端口映射到 nginx 容器的 80 端口为例） 步骤五：显示端口映射是否实现 （补充：这里以显示宿主机的 8080 端口为例）]]></description>
										<content:encoded><![CDATA[
<h1 id="注意">注意：</h1>



<p>在创建 Docker 虚拟网桥之前，要先安装 Docker</p>



<div class="wp-container-4 is-horizontal is-content-justification-center wp-block-buttons">
<div class="wp-block-button is-style-outline"><a class="wp-block-button__link no-border-radius" href="https://eternalcenter-sep-2022.github.io/docker-install/">Docker 的安装</a></div>
</div>



<h1 id="正文">正文：</h1>



<h3 id="步骤一-创建-docker-的虚拟网桥">步骤一：创建 Docker 的虚拟网桥</h3>



<pre class="wp-block-code"><code># docker network create --subnet=172.16.0.0/24 dockernetwork</code></pre>



<p>（补充：这里以创建网段为 172.16.0.0/24 名为 dockernetwork 为例）</p>



<h3 id="步骤二-显示创建的虚拟网桥">步骤二：显示创建的虚拟网桥</h3>



<pre class="wp-block-code"><code># docker network list</code></pre>



<h3 id="步骤三-使用创建的虚拟网桥加载并启动-docker-镜像">步骤三：使用创建的虚拟网桥加载并启动 Docker 镜像</h3>



<pre class="wp-block-code"><code># docker run --network=dockernetwork -id nginx</code></pre>



<p>（补充：这里以使用 dockernetwork 开启 nginx 镜像为例）</p>



<h3 id="步骤四-创建端口映射">步骤四：创建端口映射</h3>



<pre class="wp-block-code"><code># docker run -p 8080:80 -id nginx</code></pre>



<p>（补充：这里以将宿主机的 8080 端口映射到 nginx 容器的 80 端口为例）</p>



<h3 id="步骤五-显示端口映射是否实现">步骤五：显示端口映射是否实现</h3>



<pre class="wp-block-code"><code># curl 127.0.0.1:8080</code></pre>



<p>（补充：这里以显示宿主机的 8080 端口为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Docker 容器的使用</title>
		<link>https://eternalcenter-sep-2022.github.io/docker-use/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 06 Oct 2020 07:09:05 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Container (容器)]]></category>
		<category><![CDATA[Docker]]></category>
		<guid isPermaLink="false">https://eternalcenter-sep-2022.github.io/?p=11335</guid>

					<description><![CDATA[注意： 在使用 Docker 容器之前，要先安装 Docker 正文： 内容一：加载并启动 Docker 镜像 1.1 在前台启动 Docker 镜像 1.1.1 在非交互模式下在前台加载并启动 Docker 镜像 1.1.1.1 在非交互模式下在前台加载并启动 Docker 镜像但不执行命令 1.1.1.1.1 在非交互模式下在前台加载并启动 Docker 镜像但不执行命令的格式 （补充：1) 如果使用镜像名无效就使用镜像的 ID2) 如果镜像的 ID 只有 1 个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的镜像，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像3) 镜像启动了之后就变成容器了） 1.1.1.1.2 在非交互模式下在前台加载并启动 Docker 镜像但不执行命令的案例 （补充：这里以非交互式加载并启动 centos 镜像 为例） 1.1.1.2 在非交互模式下在前台加载并启动 &#8230; <p class="link-more"><a href="https://eternalcenter-sep-2022.github.io/docker-use/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] Docker 容器的使用"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h1 id="注意">注意：</h1>



<p>在使用 Docker 容器之前，要先安装 Docker</p>



<div class="wp-container-5 is-horizontal is-content-justification-center wp-block-buttons">
<div class="wp-block-button is-style-outline"><a class="wp-block-button__link no-border-radius" href="https://eternalcenter-sep-2022.github.io/docker-install/">Docker 的安装</a></div>
</div>



<h1 id="正文">正文：</h1>



<h3 id="内容一-加载并启动-docker-镜像1-1-在前台启动-docker-镜像1-1-1-在非交互模式下在前台加载并启动-docker-镜像1-1-1-1-在非交互模式下在前台加载并启动-docker-镜像但不执行命令1-1-1-1-1-在非交互模式下在前台加载并启动-docker-镜像但不执行命令的格式">内容一：加载并启动 Docker 镜像</h3>



<h4 id="内容一-加载并启动-docker-镜像1-1-在前台启动-docker-镜像1-1-1-在非交互模式下在前台加载并启动-docker-镜像1-1-1-1-在非交互模式下在前台加载并启动-docker-镜像但不执行命令1-1-1-1-1-在非交互模式下在前台加载并启动-docker-镜像但不执行命令的格式">1.1 在前台启动 Docker 镜像</h4>



<h5 id="内容一-加载并启动-docker-镜像1-1-在前台启动-docker-镜像1-1-1-在非交互模式下在前台加载并启动-docker-镜像1-1-1-1-在非交互模式下在前台加载并启动-docker-镜像但不执行命令1-1-1-1-1-在非交互模式下在前台加载并启动-docker-镜像但不执行命令的格式">1.1.1 在非交互模式下在前台加载并启动 Docker 镜像</h5>



<h5 id="内容一-加载并启动-docker-镜像1-1-在前台启动-docker-镜像1-1-1-在非交互模式下在前台加载并启动-docker-镜像1-1-1-1-在非交互模式下在前台加载并启动-docker-镜像但不执行命令1-1-1-1-1-在非交互模式下在前台加载并启动-docker-镜像但不执行命令的格式">1.1.1.1 在非交互模式下在前台加载并启动 Docker 镜像但不执行命令</h5>



<h5 id="内容一-加载并启动-docker-镜像1-1-在前台启动-docker-镜像1-1-1-在非交互模式下在前台加载并启动-docker-镜像1-1-1-1-在非交互模式下在前台加载并启动-docker-镜像但不执行命令1-1-1-1-1-在非交互模式下在前台加载并启动-docker-镜像但不执行命令的格式">1.1.1.1.1 在非交互模式下在前台加载并启动 Docker 镜像但不执行命令的格式</h5>



<pre class="wp-block-code"><code># docker run &lt;image ID or image name&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用镜像名无效就使用镜像的 ID<br>2) 如果镜像的 ID 只有 1 个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的镜像，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>3) 镜像启动了之后就变成容器了<br>）</p>



<h5 id="1-1-1-1-2-在非交互模式下在前台加载并启动-docker-镜像但不执行命令的案例">1.1.1.1.2 在非交互模式下在前台加载并启动 Docker 镜像但不执行命令的案例</h5>



<pre class="wp-block-code"><code># docker run centos</code></pre>



<p>（补充：这里以非交互式加载并启动 centos 镜像 为例）</p>



<h5 id="1-1-1-2-在非交互模式下在前台加载并启动-docker-镜像同时执行命令1-1-1-2-1-在非交互模式下在前台加载并启动-docker-镜像同时执行命令的格式">1.1.1.2 在非交互模式下在前台加载并启动 Docker 镜像同时执行命令</h5>



<h5 id="1-1-1-2-在非交互模式下在前台加载并启动-docker-镜像同时执行命令1-1-1-2-1-在非交互模式下在前台加载并启动-docker-镜像同时执行命令的格式">1.1.1.2.1 在非交互模式下在前台加载并启动 Docker 镜像同时执行命令的格式</h5>



<pre class="wp-block-code"><code># docker run &lt;image ID or image name&gt; &lt;command in image&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用镜像名无效就使用镜像的 ID<br>2) 如果镜像的 ID 只有 1 个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的镜像，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>3) 镜像启动了之后就变成容器了<br>）</p>



<h5 id="1-1-1-2-2-在非交互模式下在前台加载并启动-docker-镜像同时执行命令的案例">1.1.1.2.2 在非交互模式下在前台加载并启动 Docker 镜像同时执行命令的案例</h5>



<pre class="wp-block-code"><code># docker run centos /bin/echo 'Hello world'
Hello world</code></pre>



<p>（补充：这里以非交互式加载并启动 centos 镜像，并执行 /bin/echo &#8216;Hello world&#8217; 为例）</p>



<h5 id="1-1-2-在交互模式下在前台加载并启动-docker-镜像1-1-2-1-在交互模式下在前台加载并启动-docker-镜像的格式">1.1.2 在交互模式下在前台加载并启动 Docker 镜像</h5>



<h5 id="1-1-2-在交互模式下在前台加载并启动-docker-镜像1-1-2-1-在交互模式下在前台加载并启动-docker-镜像的格式">1.1.2.1 在交互模式下在前台加载并启动 Docker 镜像的格式</h5>



<pre class="wp-block-code"><code># docker run centos -t -i &lt;image ID or image name&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用镜像名无效就使用镜像的 ID<br>2) 如果镜像的 ID 只有 1 个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的镜像，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>3) 镜像启动了之后就变成容器了<br>4) -i 代表要保持打开并且可以进行标准输入<br>5) -t 代表要开启一个伪终端<br>）</p>



<h5 id="1-1-2-2-在交互模式下在前台启动-docker-镜像的案例">1.1.2.2 在交互模式下在前台启动 Docker 镜像的案例</h5>



<pre class="wp-block-code"><code># docker run -t -i centos
&#91;root@1a7d6f4fd45c /]# exit
exit</code></pre>



<p>（<br>补充：<br>1) 这里以交互式加载并启动 centos 镜像，再退出为例<br>2) -i 代表要保持打开并且可以进行标准输入<br>3) -t 代表要开启 1 个伪终端<br>4) 默认会进入 bash 环境<br>）</p>



<p>或者：</p>



<pre class="wp-block-code"><code># docker run -it centos
 bash
&#91;root@1a7d6f4fd45c /]# exit
exit</code></pre>



<p>（<br>补充：<br>1) 这里以交互式加载并启动 centos 镜像，再退出为例<br>2) -i 代表要保持打开并且可以进行标准输入<br>3) -t 代表要开启一个伪终端<br>4) bash 代表通过 bash 命令来进入 bash 环境<br>）</p>



<h4 id="1-2-在后台启动-docker-镜像1-2-1-在后台启动-docker-镜像的格式">1.2 在后台启动 Docker 镜像</h4>



<h5 id="1-2-在后台启动-docker-镜像1-2-1-在后台启动-docker-镜像的格式">1.2.1 在后台启动 Docker 镜像的格式</h5>



<pre class="wp-block-code"><code># docker run -tid &lt;image ID or image name&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用镜像名无效就使用镜像的 ID<br>2) 如果镜像的 ID 只有 1 个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的镜像，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>3) 镜像启动了之后就变成容器了<br>4) -i 代表要保持打开并且可以进行标准输入<br>5) -t 代表要开启 1 个伪终端<br>6) -d 代表放在后台运行<br>）</p>



<h5 id="1-2-2-在后台启动-docker-镜像的案例">1.2.2 在后台启动 Docker 镜像的案例</h5>



<pre class="wp-block-code"><code># docker run -itd centos</code></pre>



<p>（<br>补充：<br>1) 这里以在后台加载并启动 centos 镜像为例<br>2) -i 代表要保持打开并且可以进行标准输入<br>3) -t 代表要开启 1 个伪终端<br>4) -d 代表放在后台运行<br>）</p>



<h3 id="步骤二-将容器的端口号映射宿主机的端口号2-1-将容器的端口号映射宿主机的端口号的格式">步骤二：将容器的端口号映射宿主机的端口号</h3>



<h4 id="步骤二-将容器的端口号映射宿主机的端口号2-1-将容器的端口号映射宿主机的端口号的格式">2.1 将容器的端口号映射宿主机的端口号的格式</h4>



<pre class="wp-block-code"><code># docker run -d -p &lt;the port number of the host&gt;:&lt;the port number of the container&gt; -it &lt;image ID or image name&gt;</code></pre>



<p>（<br>补充：<br>1) 需要在加载并启动镜像时执行此步骤<br>2) 如果镜像的 ID 只有一个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的容器，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>3) 镜像启动了之后就变成容器了<br>4) -d 代表放在后台运行<br>5) -p 代表要做端口映射<br>6) -i 代表要保持打开并且可以进行标准输入<br>7) -t 代表要开启 1 个伪终端<br>）</p>



<h4 id="2-2-将容器的端口映射宿主机的端口的案例">2.2 将容器的端口映射宿主机的端口的案例</h4>



<pre class="wp-block-code"><code># docker run -d -p 8080:80 -it nginx</code></pre>



<p>（补充：这里以启动 nginx 镜像，并将宿主机的 8080 端口映射到容器的 80 端口为例）</p>



<h3 id="步骤三-将宿主机上的文件或目录映射到容器的文件或目录里3-1-将宿主机上的文件或目录映射到容器的文件或目录里的格式">步骤三：将宿主机上的文件或目录映射到容器的文件或目录里</h3>



<h4 id="步骤三-将宿主机上的文件或目录映射到容器的文件或目录里3-1-将宿主机上的文件或目录映射到容器的文件或目录里的格式">3.1 将宿主机上的文件或目录映射到容器的文件或目录里的格式</h4>



<pre class="wp-block-code"><code># docker run -d -v &lt;a file or directory on the host&gt;:&lt;a file or directory on the container&gt; -it &lt;image ID or image name&gt;</code></pre>



<p>（<br>补充：<br>1) 需要在加载并启动镜像时执行此步骤<br>2) 如果镜像的 ID 只有一个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的容器，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>3) 镜像启动了之后就变成容器了<br>4) -d 代表放在后台运行<br>5) -v 代表要做文件或目录映射<br>6) -i 代表要保持打开并且可以进行标准输入<br>7) -t 代表要开启 1 个伪终端<br>）</p>



<h4 id="3-2-将宿主机上的文件或目录映射到容器的文件或目录里的案例">3.2 将宿主机上的文件或目录映射到容器的文件或目录里的案例</h4>



<pre class="wp-block-code"><code># docker run  -d -v /tmp/web:/var/www/html -it nginx</code></pre>



<p>（补充：这里以启动 nginx 镜像，并将宿主机的目录/tmp/web 映射到容器的目录 /var/www/html 为例）</p>



<h3 id="步骤四-显示容器列表4-1-显示正在运行的容器列表">步骤四：显示容器列表</h3>



<h4 id="步骤四-显示容器列表4-1-显示正在运行的容器列表">4.1 显示正在运行的容器列表</h4>



<pre class="wp-block-code"><code># docker ps</code></pre>



<h4 id="4-2-显示所有加载并运行过或正在运行的容器列表">4.2 显示所有加载并运行过或正在运行的容器列表</h4>



<pre class="wp-block-code"><code># docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
e145ad3588ed        centos              "/bin/bash"         19 seconds ago      Exited (0) 17 seconds ago                       thirsty_mcnulty</code></pre>



<h3 id="步骤五-显示容器的信息5-1-显示容器在运行的进程">步骤五：显示容器的信息</h3>



<h4 id="步骤五-显示容器的信息5-1-显示容器在运行的进程">5.1 显示容器在运行的进程</h4>



<pre class="wp-block-code"><code># docker top &lt;image ID or image name&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用镜像名无效就使用镜像的 ID<br>2) 如果镜像的 ID 只有一个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的镜像，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>）</p>



<h4 id="5-2-显示容器的-ip-地址">5.2 显示容器的 IP 地址</h4>



<pre class="wp-block-code"><code># docker inspect -f '{{.NetworkSettings.IPAddress}}' &lt;image ID or image name&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用镜像名无效就使用镜像的 ID<br>2) 如果镜像的 ID 只有 1 个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的镜像，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>）</p>



<h4 id="5-3-显示容器的-mac-地址">5.3 显示容器的 MAC 地址</h4>



<pre class="wp-block-code"><code># docker inspect -f '{{.NetworkSettings.MacAddress}}' &lt;image ID or image name&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用镜像名无效就使用镜像的 ID<br>2) 如果镜像的 ID 只有 1 个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的镜像，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>）</p>



<h3 id="步骤六-连接某一个容器6-1-连接某一个容器但是退出时会关闭这个容器">步骤六：连接某 1 个容器</h3>



<h4 id="步骤六-连接某一个容器6-1-连接某一个容器但是退出时会关闭这个容器">6.1 连接某 1 个容器但是退出时会关闭这个容器</h4>



<pre class="wp-block-code"><code># docker attach &lt;image ID or image name&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用镜像名无效就使用镜像的 ID<br>2) 如果镜像的 ID 只有 1 个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的镜像，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>）</p>



<h4 id="6-2-连接某一个容器且退出时不会关闭这个容器">6.2 连接某 1 个容器且退出时不会关闭这个容器</h4>



<pre class="wp-block-code"><code># docker exec -it &lt;image ID or image name&gt; /bin/bash</code></pre>



<p>（<br>补充：<br>1) 如果使用镜像名无效就使用镜像的 ID<br>2) -i 代表要保持打开并且可以进行标准输入<br>3) -t 代表要开启 1 个伪终端<br>4) 如果镜像的 ID 只有一个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的镜像，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>）</p>



<h4 id="6-3-以非交互的形式连接一个容器">6.3 以非交互的形式连接 1 个容器</h4>



<pre class="wp-block-code"><code># docker exec -t &lt;image ID or image name&gt; &lt;command&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用镜像名无效就使用镜像的 ID<br>2) -t 代表要开启 1 个伪终端<br>3) 如果镜像的 ID 只有一个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的镜像，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>）</p>



<h3 id="步骤七-重启某一个容器">步骤七：重启某 1 个容器</h3>



<pre class="wp-block-code"><code># docker restart &lt;container ID or container name&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用容器名无效就使用容器的 ID<br>2) 如果容器的 ID 只有 1 个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的容器，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>）</p>



<h3 id="步骤八-启动某一个已经停止的容器">步骤八：启动某 1 个已经停止的容器</h3>



<pre class="wp-block-code"><code># docker stop &lt;container ID or container name&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用容器名无效就使用容器的 ID<br>2) 如果镜像的 ID 只有 1 个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的容器，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>）</p>



<h3 id="步骤九-删除某一个容器">步骤九：删除某 1 个容器</h3>



<pre class="wp-block-code"><code># docker rm &lt;container ID or container name&gt;</code></pre>



<p>（<br>补充：<br>1) 如果使用容器名无效就使用容器的 ID<br>2) 如果容器的 ID 只有 1 个 9 开头，那就只用使用 9 ，如果有 94 和 95 开头的容器，就需要使用 94 或 95，反正需要保证它们的唯一性，否则会一次性操作所有相关的镜像<br>）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Docker 官方镜像的下载</title>
		<link>https://eternalcenter-sep-2022.github.io/docker-image-download/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 06 Oct 2020 07:03:56 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Container (容器)]]></category>
		<category><![CDATA[Docker]]></category>
		<guid isPermaLink="false">https://eternalcenter-sep-2022.github.io/?p=11331</guid>

					<description><![CDATA[注意： 在下载 Docker 官方镜像之前，要先安装 Docker 正文： 步骤一：使用 Docker 官方的代理加速器 1.1 修改 Docker 的配置文件 将以下内容： 修改为： （补充：1) 此步骤是为了避免因网络问题导致下载官方 Docker 镜像不成功的情况2) 主要目的是为了将 &#8220;registry-mirrors&#8221;: [&#8220;https://registry.docker-cn.com&/#8221;], 放在大括号 “{}” 内） 1.2 重启 Docker 服务 步骤二：显示本地已有的 Docker 镜像 步骤三：查找某 1 个官方库里的 Docker 镜像 3.1 查找某 1 个官方库里的 Docker 镜像的格式 3.2 查找某 1 个官方库里的 Docker 镜像名的案例 （补充：1) 这里以查找 centos 镜像为例2) 这里默认会从公网 docker.io &#8230; <p class="link-more"><a href="https://eternalcenter-sep-2022.github.io/docker-image-download/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] Docker 官方镜像的下载"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h1 id="注意">注意：</h1>



<p>在下载 Docker 官方镜像之前，要先安装 Docker</p>



<div class="wp-container-6 is-horizontal is-content-justification-center wp-block-buttons">
<div class="wp-block-button is-style-outline"><a class="wp-block-button__link no-border-radius" href="https://eternalcenter-sep-2022.github.io/docker-install/">Docker 的安装</a></div>
</div>



<h1 id="正文">正文：</h1>



<h3 id="具体的操作步骤-步骤一-使用-docker-官方的代理加速器1-1-修改-docker-的配置文件">步骤一：使用 Docker 官方的代理加速器</h3>



<h4 id="具体的操作步骤-步骤一-使用-docker-官方的代理加速器1-1-修改-docker-的配置文件">1.1 修改 Docker 的配置文件</h4>



<pre class="wp-block-code"><code># vim /etc/docker/daemon.json</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
}</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
  "registry-mirrors": &#91;"https://registry.docker-cn.com/"],
}</code></pre>



<p>（<br>补充：<br>1) 此步骤是为了避免因网络问题导致下载官方 Docker 镜像不成功的情况<br>2) 主要目的是为了将 &#8220;registry-mirrors&#8221;: [&#8220;https://registry.docker-cn.com&/#8221;], 放在大括号 “{}” 内<br>）</p>



<h4 id="1-2-重启-docker-服务">1.2 重启 Docker 服务</h4>



<pre class="wp-block-code"><code># systemctl restart docker</code></pre>



<h3 id="步骤二-查看本地已有的-docker-镜像">步骤二：显示本地已有的 Docker 镜像</h3>



<pre class="wp-block-code"><code># docker images</code></pre>



<h3 id="步骤三-查找某一个官方库里的-docker-镜像3-1-查找某一个官方库里的-docker-镜像的格式">步骤三：查找某 1 个官方库里的 Docker 镜像</h3>



<h4 id="步骤三-查找某一个官方库里的-docker-镜像3-1-查找某一个官方库里的-docker-镜像的格式">3.1 查找某 1 个官方库里的 Docker 镜像的格式</h4>



<pre class="wp-block-code"><code># docker search &lt;image&gt; </code></pre>



<h4 id="3-2-查找某一个官方库里的-docker-镜像名的案例">3.2 查找某 1 个官方库里的 Docker 镜像名的案例</h4>



<pre class="wp-block-code"><code># docker search centos</code></pre>



<p>（<br>补充：<br>1) 这里以查找 centos 镜像为例<br>2) 这里默认会从公网 docker.io 的官方镜像库里查找<br>3) 如果在查找的 DESCRIPTION 里出现了类似 The official build 的字样，则表示这个镜像是由官方制作的<br>）</p>



<h3 id="步骤四-下载某一个官方库里的-docker-镜像4-1-下载某一个官方库里的-docker-镜像的格式4-1-1-下载某一个官方库里最新版的-docker-镜像的格式">步骤四：下载某 1 个官方库里的 Docker 镜像</h3>



<h4 id="步骤四-下载某一个官方库里的-docker-镜像4-1-下载某一个官方库里的-docker-镜像的格式4-1-1-下载某一个官方库里最新版的-docker-镜像的格式">4.1 下载某 1 个官方库里的 Docker 镜像的格式</h4>



<h5 id="步骤四-下载某一个官方库里的-docker-镜像4-1-下载某一个官方库里的-docker-镜像的格式4-1-1-下载某一个官方库里最新版的-docker-镜像的格式">4.1.1 下载某 1 个官方库里最新版的 Docker 镜像的格式</h5>



<pre class="wp-block-code"><code># docker pull &lt;image&gt;</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># docker pull &lt;image&gt;:latest</code></pre>



<h5 id="4-1-2-下载某一个官方库里旧的指定版的-docker-镜像的格式">4.1.2 下载某 1 个官方库里旧的指定版的 Docker 镜像的格式</h5>



<pre class="wp-block-code"><code># docker pull &lt;image&gt;:&lt;version&gt;</code></pre>



<h4 id="4-2-下载某一个官方库里的-docker-镜像的案例4-2-1-下载某一个官方库里最新版的-docker-镜像的案例">4.2 下载某 1 个官方库里的 Docker 镜像的案例</h4>



<h5 id="4-2-下载某一个官方库里的-docker-镜像的案例4-2-1-下载某一个官方库里最新版的-docker-镜像的案例">4.2.1 下载某 1 个官方库里最新版的 Docker 镜像的案例</h5>



<pre class="wp-block-code"><code># docker pull centos
Using default tag: latest
latest: Pulling from library/centos
3c72a8ed6814: Pull complete 
Digest: sha256:76d24f3ba3317fa945743bb3746fbaf3a0b752f10b10376960de01da70685fbd
Status: Downloaded newer image for centos:latest
docker.io/library/centos:latest</code></pre>



<p>（<br>补充：<br>1) 这里以下载 centos 镜像为例<br>2) 这里默认会从公网 docker.io 的官方镜像库里下载<br>）</p>



<h5 id="4-2-2-下载某一个官方库里旧的指定版的-docker-镜像的案例">4.2.2 下载某 1 个官方库里旧的指定版的 Docker 镜像的案例</h5>



<pre class="wp-block-code"><code># docker pull nginx:1
1: Pulling from library/nginx
d121f8d1c412: Downloading &#91;============&gt;                                      ]  6.728MB/27.09MB
ebd81fc8c071: Downloading &#91;===============&gt;                                   ]  8.289MB/26.4MB
655316c160af: Download complete                                                                                                                                 d121f8d1c412: Pull complete 
ebd81fc8c071: Pull complete 
655316c160af: Pull complete 
d15953c0e0f8: Pull complete 
2ee525c5c3cc: Pull complete 
Digest: sha256:c628b67d21744fce822d22fdcc0389f6bd763daac23a6b77147d0712ea7102d0
Status: Downloaded newer image for nginx:1
docker.io/library/nginx:1</code></pre>



<p>（<br>补充：<br>1) 这里以下载 nginx 的 1 版本为例<br>2) 这里默认会从公网 docker.io 的官方镜像库里下载<br>）</p>



<h3 id="步骤五-查看官方库里-docker-镜像是否成功下载到本地">步骤五：显示官方库里 Docker 镜像是否成功下载到本地</h3>



<pre class="wp-block-code"><code># docker images
REPOSITORY                                    TAG                 IMAGE ID            CREATED             SIZE
centos                                        latest              0d120b6ccaa8        7 weeks ago         215MB
nginx                                         1                   7e4d58f0e5f3        3 weeks ago         133MB</code></pre>



<h3 id="步骤六-删除-docker-本地镜像">步骤六：删除 Docker 本地镜像</h3>



<pre class="wp-block-code"><code># docker rmi &lt;image&gt;</code></pre>



<h3 id="步骤七-上传-docker-本地镜像">步骤七：上传 Docker 本地镜像</h3>



<pre class="wp-block-code"><code># docker push &lt;image&gt;</code></pre>



<p>（补充：这里默认会往公网 docker.io 的官方镜像库里上传）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Docker 信息的显示</title>
		<link>https://eternalcenter-sep-2022.github.io/docker-info/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sun, 04 Oct 2020 09:50:40 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Container (容器)]]></category>
		<category><![CDATA[Docker]]></category>
		<guid isPermaLink="false">https://eternalcenter-sep-2022.github.io/?p=10625</guid>

					<description><![CDATA[注意： 在显示 Docker 信息之前要先安装 Docker 正文： 内容一：显示 Docker 软件的基本信息 内容二：显示 Docker 软件命令的帮助信息]]></description>
										<content:encoded><![CDATA[
<h1 id="注意">注意：</h1>



<p>在显示 Docker 信息之前要先安装 Docker</p>



<div class="wp-container-7 is-horizontal is-content-justification-center wp-block-buttons">
<div class="wp-block-button is-style-outline"><a class="wp-block-button__link no-border-radius" href="https://eternalcenter-sep-2022.github.io/docker-install/">Docker 的安装</a></div>
</div>



<h1 id="正文">正文：</h1>



<h3 id="内容一-显示-docker-软件的基本信息">内容一：显示 Docker 软件的基本信息</h3>



<pre class="wp-block-code"><code># docker info</code></pre>



<h3 id="内容二-显示-docker-软件命令的帮助信息">内容二：显示 Docker 软件命令的帮助信息</h3>



<pre class="wp-block-code"><code># docker help</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Docker 的安装</title>
		<link>https://eternalcenter-sep-2022.github.io/docker-install/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sun, 04 Oct 2020 09:38:01 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Container (容器)]]></category>
		<category><![CDATA[Docker]]></category>
		<guid isPermaLink="false">https://eternalcenter-sep-2022.github.io/?p=10623</guid>

					<description><![CDATA[步骤一：系统环境要求 服务器系统要配置好可用的软件源 步骤二：安装 Docker 2.1 CentOS&#38;RHEL 安装 Docker 2.2 openSUSE&#38;SUSE 安装 Docker （注意：从 CentOS&#38;RHEL 8 开始，CentOS&#38;RHEL 将用 podman 替代 Docker，所以 CentOS&#38;RHEL 官方库中不再包含 Docker 的软件包） 步骤三：启动 Docker 步骤四：显示 Docker 的信息]]></description>
										<content:encoded><![CDATA[
<h3 id="步骤一-系统环境要求">步骤一：系统环境要求</h3>



<p>服务器系统要配置好可用的软件源</p>



<h3 id="步骤二-安装-docker2-1-centos-rhel-安装-docker">步骤二：安装 Docker</h3>



<h4 id="步骤二-安装-docker2-1-centos-rhel-安装-docker">2.1 CentOS&amp;RHEL 安装 Docker</h4>



<pre class="wp-block-code"><code># yum -y install docker</code></pre>



<h4 id="2-2-opensuse-suse-安装-docker">2.2 openSUSE&amp;SUSE 安装 Docker</h4>



<pre class="wp-block-code"><code># zypper -n install docker</code></pre>



<p>（注意：从 CentOS&amp;RHEL 8 开始，CentOS&amp;RHEL 将用 podman 替代 Docker，所以 CentOS&amp;RHEL 官方库中不再包含 Docker 的软件包）</p>



<h3 id="步骤三-启动-docker">步骤三：启动 Docker</h3>



<pre class="wp-block-code"><code># systemctl start docker</code></pre>



<h3 id="步骤四-显示-docker-的信息">步骤四：显示 Docker 的信息</h3>



<pre class="wp-block-code"><code># docker info</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Docker 容器简介</title>
		<link>https://eternalcenter-sep-2022.github.io/introduction-of-docker-container/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sun, 04 Oct 2020 09:31:51 +0000</pubDate>
				<category><![CDATA[Articles (文章)]]></category>
		<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Container (容器)]]></category>
		<category><![CDATA[Creations (创作)]]></category>
		<category><![CDATA[Docker]]></category>
		<category><![CDATA[Information Technology (IT) Articles (信息技术类文章)]]></category>
		<guid isPermaLink="false">https://eternalcenter-sep-2022.github.io/?p=10621</guid>

					<description><![CDATA[章节一：什么是容器 Docker 主要是由 Linux 内核的三个部分组成：1) namesapce 用于将各个服务隔离开，并按需求分成一个个隔离组，每个隔离组就可以看作一个容器，各个隔离组之间相互隔离2) CGroup 用于限制各个隔离组的可用资源，避免各个隔离组之间进行硬件资源争抢3) SELinux 用于安全，也可以不要让资源裸奔 章节二：容器和虚拟机 容器和虚拟机类似，但是容器有很多部分公用着宿主机系统的环境和软件，而虚拟机系统和宿主机系统之间是完全隔离的]]></description>
										<content:encoded><![CDATA[
<h3>章节一：什么是容器</h3>



<p style="font-size:16px">Docker 主要是由 Linux 内核的三个部分组成：<br>1) namesapce 用于将各个服务隔离开，并按需求分成一个个隔离组，每个隔离组就可以看作一个容器，各个隔离组之间相互隔离<br>2) CGroup 用于限制各个隔离组的可用资源，避免各个隔离组之间进行硬件资源争抢<br>3) SELinux 用于安全，也可以不要让资源裸奔</p>



<h3>章节二：容器和虚拟机</h3>



<p style="font-size:16px">容器和虚拟机类似，但是容器有很多部分公用着宿主机系统的环境和软件，而虚拟机系统和宿主机系统之间是完全隔离的</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
